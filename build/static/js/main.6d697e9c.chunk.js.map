{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","newName","put","Notification","message","className","Error","Person","person","deleteNumber","name","number","onClick","Filter","props","onSubmit","filterNames","value","filter","onChange","handleFilterChange","type","Form","addName","nameChange","numberChange","Phonebook","showPersons","map","App","useState","persons","setPersons","setShowPersons","useEffect","console","log","personService","initialPersons","setNewName","newNumber","setNewNumber","setFilter","errorMessage","setErrorMessage","notifMessage","setNotifMessage","event","preventDefault","filtered","toLowerCase","includes","target","some","window","confirm","find","n","returnedPerson","setTimeout","catch","error","concat","returned","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d697e9c.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deleteById = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newName) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newName)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, deleteById, update }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons.js'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"notif\">\n      {message}\n    </div>\n  )\n}\n\nconst Error = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Person = ({person, deleteNumber}) => {\n  //Person-komponentti huolehtii yksittäisen henkilön tietojen esittämisen\n  return (\n    <div>\n    {person.name} {person.number}  <button onClick={deleteNumber}> delete </button>\n    </div>\n  )\n}\n\nconst Filter = (props) => {\n  //Filter-komponentti sisältää fillteröintilomakkeen, jonka\n  //inputin ja filterNames-funktion avulla näytettävät nimet suodatetaan\n  return (\n    <form onSubmit={props.filterNames}>\n      <div>\n        filter shown with <input value={props.filter} onChange={props.handleFilterChange}/>\n        <button type='submit'>filter</button>\n      </div>\n    </form>\n  )\n}\n\nconst Form = (props) => {\n  //Form-komponentti sisältää uuden henkilön nimen \n  //ja numeron lisäämiseen käytetyn lomakkeen\n  return (\n    <div>\n      <form onSubmit={props.addName}>\n        <div>\n          name: <input value={props.name} onChange={props.nameChange}/>\n        </div>\n        <div>\n          number: <input value={props.number} onChange={props.numberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nconst Phonebook = (props) => {\n  //Phonebook-komponetti esittää koko puhelinluettelon map:in ja \n  //Perosn-komponentin avulla\n  return (\n    <div>\n      {props.showPersons.map(person =>\n        <Person key={person.id} person={person} deleteNumber={() => props.deleteNumber(person.id, person.name)}/>\n      )}\n    </div>\n  )\n}\n\nconst App = () => {\n  //alustetaan tyhjät taulukot\n  const [ persons, setPersons] = useState([])\n  const [ showPersons, setShowPersons ] = useState([])\n\n  //haetaan data puhelinluetteloon palvelimelta\n  useEffect(() => {\n    console.log('effect')\n    personService\n      .getAll()\n      .then(initialPersons => {\n        console.log('promise fulfilled')\n        setPersons(initialPersons)\n        setShowPersons(initialPersons)\n      })\n  }, [] )\n\n  //alustetaan syötteet\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState(null)\n  const [ notifMessage, setNotifMessage ] = useState(null)\n\n  const addName = (event) => {\n    //funktio lisää lomakkeella syötetyn nimen ja/tai numeron puhelinluetteloon\n    event.preventDefault()\n\n    //tarkistetaan, onko lisättävä nimi jo luettelossa\n    if (persons.some(person => person.name === newName)) {\n\n      //varmistetaan käyttäjältä, halutaanko numero muuttaa\n      if (window.confirm(`${newName} is already added to phonebook,\\\n would you like to replace the old number with a new one?`)) {\n\n        const person = persons.find(n => n.name === newName)\n        const id = person.id\n        const changedPerson = {name: newName, number: newNumber}\n\n        personService\n          .update(id, changedPerson)\n          .then(returnedPerson => {\n            setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n            setShowPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n            setNotifMessage('Changed  the number of ' + newName)\n            setTimeout(() => {\n              setNotifMessage(null)\n            }, 4000)\n          })\n          .catch(error => {\n            setErrorMessage(person.name + ' has already been deleted from the server')\n            setTimeout(() => {\n              setErrorMessage(null)\n            }, 4000)\n          })\n      }\n    }\n\n    //jos nimi ei ole luettelossa, lisätään se palvelimelle\n    else {\n      personService\n        .create({name: newName, number: newNumber})\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setShowPersons(persons.concat(returnedPerson))\n        })\n      setNotifMessage('Added ' + newName) //ilmoitetaan onnistuneesta lisäyksestä käyttäjälle\n      setTimeout(() => {\n        setNotifMessage(null)\n      }, 4000)\n    }\n    setNewName('')\n    setNewNumber('')\n    setFilter('')\n  }\n\n\n  const deleteNumber = (id, name) => {\n    //funktion avulla poistetaan tietty yhteystieto puhelinluettelosta\n\n    //varmistetaan käyttäjältä, että yhteystieto halutaan poistaa\n    if (window.confirm('Delete ' + name + '?')) {\n      personService\n        .deleteById(id)\n        .then(returned => {\n          console.log(returned)\n          setNotifMessage('Deleted ' + name) //ilmoitetaan onnistuneesta poistosta\n          setTimeout(() => {\n            setNotifMessage(null)\n          }, 4000)\n          setPersons(persons.filter(n => n.id !== id)) //poistetaan yhteystieto myös listoilta persons ja showPersons\n          setShowPersons(persons.filter(n => n.id !== id))\n        })\n        .catch(error => {\n          setErrorMessage(name + ' has already been deleted from the server') //näytetään virheviesti, jos yhteystieto on jo poistettu\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 4000)\n        })\n    }\n  }\n\n  const filterNames = (event) => {\n    //funktio filtteröi nimet annetun merkkijonon perusteella\n\n    event.preventDefault()\n    var filtered = persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n    setShowPersons(filtered)\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notifMessage} />\n      <Error message={errorMessage} />\n      <Filter filterNames={filterNames} filter={filter} handleFilterChange={handleFilterChange} />\n      <h2>Add a new contact</h2>\n      <Form name={newName} number={newNumber} nameChange={handleNameChange}\n      numberChange={handleNumberChange} addName={addName}/>\n      <h2>Numbers</h2>\n      <Phonebook persons={persons} showPersons={showPersons} deleteNumber={deleteNumber}/>\n    </div>\n  )\n\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}